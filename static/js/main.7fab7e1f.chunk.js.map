{"version":3,"sources":["components/icons/check-icon.svg","helpers/elements.js","helpers/event-listeners.js","components/check-box/check-box.js","components/icons/checkbox-icon.js","helpers/utils.js","components/chart/line.js","components/chart/bars.js","helpers/date-time.js","components/tooltip/tooltip.js","components/grid/grid.js","components/chart/chart.js","components/map/map.js","components/switch-button/switch-button.js","index.js","components/footer/footer.js"],"names":["module","exports","__webpack_require__","p","createElement","className","tag","arguments","length","undefined","node","document","createSvgElement","attrs","createElementNS","baseVal","Object","keys","forEach","key","setAttribute","addListener","element","event","listener","addEventListener","removeListener","removeEventListener","addDragAndDropListeners","getTouchCoords","e","x","touches","clientX","y","clientY","offset","offsetX","offsetY","getMouseOffset","onMouseMove","buttons","body","onMouseUp","mouseCoords","getMouseCoords","cornerCoords","box","getBoundingClientRect","touchCoords","left","top","getTouchOffset","onTouchMove","onTouchEnd","check_box_check_box","color","text","onChange","checked","wrapper","mark","style","label","textContent","appendChild","img","icon","createCheckIcon","minmax","arr","min","max","_ref","y0","y1","Math","boundBy","right","relToAbs","rel","a","b","absToRel","abs","calcYBounds","xData","yData","x0Rel","x1Rel","type","i","j","x0","x1","k","el","findClosestIndex","xRel","colorToGrb","c","replace","r","parseInt","g","slice","sdf","split","INTERSECTION_LINES_COLOR","generatePoints","area","yBase","xMin","dx","points","concat","Line","xColumn","yColumn","_this","this","classCallCheck","yColumnBase","_yColumnBase","_area","_xColumn","_yColumn","_chartLine","_mapLine","_visible","_color","stroke-linejoin","vector-effect","stroke","fill","intersectionLineV","x2","intersectionPoint","_intersectionLineH","_intersectionPoint0","_intersectionPoint1","_intersectionPoint2","_intersectionPoint3","_intersectionPoint4","mapNode","val","_ref2","slicedToArray","_ref4","_ref3","svgW","svgH","display","stroke-width","_selectedBar","xMouse","step","ceil","background","window","getComputedStyle","backgroundColor","c1","c2","opacity","_colorToGrb","r1","g1","b1","_colorToGrb2","r2","g2","b2","rgbToString","toFixed","calcOpacityColor","days","months","MARGIN","PADDING","WIDTH","LINE_HEIGHT","Tooltip","parentNode","transformY","transformX","rect","rx","ry","width","transform","svgBox","height","xAbs","data","childNodes","removeChild","xText","ms","date","Date","dayOfWeek","getDay","dayOfMonth","getDate","month","getMonth","year","getFullYear","tooltipDate","name","yName","dy","yVal","text-anchor","Grid","resize","_this$node$parentNode","_this$node$parentNode2","countV","countH","yStep","xStep","yCur","line","y2","xCur","typeToConstructor","_len","props","Array","_key","construct","bar","_len2","_key2","Bars","_len3","_key3","chart_chart","title","chartSvg","colors","names","types","columns","stacked","percentage","_getColumns","y_scaled","xKey","filter","column","yColumns","reduce","obj","objectSpread","defineProperty","getColumns","entries","map","col","q","assign","tooltip","grid","mouseXFixed","keyToYBound","keyToGlobalYBound","chartViewportTransform","chartAreaXTransform","controls","header","init","visualisation","reverse","_createMap","mapSvg","svgWrapper","mapViewportTransform","mapOverlayLeft","mapOverlayRight","mapWindow","windowLeftEdge","windowRightEdge","append","appendBeforeOverlay","insertBefore","setMapViewport","w","h","setMapWindow","mapWidth","createMap","updateIntersections","_chartSvg$getBounding","tooltipData","visible","render","updateYArea","yColumnSum","toConsumableArray","_ref5","getYBounds","_ref6","getGlobalYBounds","globalMin","globalMax","yChartArea","yMapArea","deepUpdateYArea","updateXBounds","setXChartArea","onResize","_chartSvg$getBounding2","svgWidth","svgHeight","_mapNode$getBoundingC","mapHeight","createCheckBox","value","getMapX","getChartX","coords","switch_button_switch_button","btn","id","night","charts","root","getElementById","_callee","regenerator_default","wrap","_context","prev","next","abrupt","then","t","bind","default","catch","error","stop","footer","createSwitchButton","createFooter","getComponent","chartData","_createChart","createChart","data2","_createChart2","data3","_createChart3","data4","_createChart4","data5","_createChart5"],"mappings":"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","file":"static/js/main.7fab7e1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check-icon.cc4bfc9f.svg\";","export const createElement = (className, tag = 'div') => {\r\n    const node = document.createElement(tag);\r\n    if (className) node.className = className;\r\n    return node;\r\n};\r\n\r\nexport const createSvgElement = (tag, attrs, className) => {\r\n    const node = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    if (className) {\r\n        node.className.baseVal = className;\r\n    }\r\n    if (attrs) {\r\n        Object.keys(attrs).forEach(key => {\r\n            node.setAttribute(key, attrs[key]);\r\n        });\r\n    }\r\n    return node;\r\n};\r\n","export const addListener = (element, event, listener) => {\r\n    element.addEventListener(event, listener, false);\r\n};\r\n\r\nexport const removeListener = (element, event, listener) => {\r\n    element.removeEventListener(event, listener);\r\n};\r\n\r\nexport const addDragAndDropListeners = (element, listener) => {\r\n    const getMouseCoords = e => ({ x: e.clientX, y: e.clientY });\r\n    const getTouchCoords = e => ({ x: e.touches[0].clientX, y: e.touches[0].clientY });\r\n    const getMouseOffset = e => ({ x: e.offsetX, y: e.offsetY });\r\n    const getTouchOffset = e => {\r\n        const box = element.getBoundingClientRect();\r\n        const touchCoords = getTouchCoords(e);\r\n        return {\r\n            x: touchCoords.x - box.left,\r\n            y: touchCoords.y - box.top\r\n        };\r\n    };\r\n\r\n    addListener(element, 'mousedown', e => {\r\n        const offset = getMouseOffset(e);\r\n\r\n        const onMouseMove = e => {\r\n            if (e.buttons !== 1) {\r\n                removeListener(document.body, 'mousemove', onMouseMove);\r\n                removeListener(document.body, 'mouseup', onMouseUp);\r\n            } else {\r\n                const mouseCoords = getMouseCoords(e);\r\n                const cornerCoords = { x: mouseCoords.x - offset.x, y: mouseCoords.y + offset.y };\r\n                listener(cornerCoords);\r\n            }\r\n        };\r\n\r\n        function onMouseUp() {\r\n            removeListener(document.body, 'mousemove', onMouseMove);\r\n            removeListener(document.body, 'mouseup', onMouseUp);\r\n        }\r\n\r\n        addListener(document.body, 'mousemove', onMouseMove);\r\n        addListener(document.body, 'mouseup', onMouseUp);\r\n    });\r\n\r\n    addListener(element, 'touchstart', e => {\r\n        const offset = getTouchOffset(e);\r\n\r\n        const onTouchMove = e => {\r\n            const touchCoords = getTouchCoords(e);\r\n            const cornerCoords = { x: touchCoords.x - offset.x, y: touchCoords.y + offset.y };\r\n            listener(cornerCoords);\r\n        };\r\n\r\n        function onTouchEnd() {\r\n            removeListener(document.body, 'touchmove', onTouchMove);\r\n            removeListener(document.body, 'touchend', onTouchEnd);\r\n            removeListener(document.body, 'touchcancel', onTouchEnd);\r\n        }\r\n\r\n        addListener(document.body, 'touchmove', onTouchMove);\r\n        addListener(document.body, 'touchend', onTouchEnd);\r\n        addListener(document.body, 'touchcancel', onTouchEnd);\r\n    });\r\n};\r\n","import './check-box.css';\r\nimport { createElement } from '../../helpers/elements';\r\nimport { addListener } from '../../helpers/event-listeners';\r\nimport createCheckIcon from '../icons/checkbox-icon';\r\n\r\nconst uncheckedMark = 'cb_unchecked-mark';\r\nconst checkedMark = 'cb_checked-mark';\r\n\r\nexport default (color, text, onChange) => {\r\n    let checked = true;\r\n\r\n    const wrapper = createElement('cb_wrapper');\r\n\r\n    const mark = createElement(checkedMark);\r\n    mark.style.color = color;\r\n\r\n    const label = createElement('cb_label');\r\n    label.textContent = text;\r\n\r\n    wrapper.appendChild(mark);\r\n    wrapper.appendChild(label);\r\n\r\n    mark.appendChild(createCheckIcon());\r\n\r\n    addListener(wrapper, 'click', () => {\r\n        checked = !checked;\r\n        onChange && onChange(checked);\r\n        mark.className = checked ? checkedMark : uncheckedMark;\r\n    });\r\n\r\n    return wrapper;\r\n};\r\n","import icon from './check-icon.svg';\r\nimport { createElement } from '../../helpers/elements';\r\n\r\nexport default () => {\r\n    const img = createElement('icon', 'img');\r\n    img.setAttribute('src', icon);\r\n    return img;\r\n};\r\n","export const minmax = arr => {\r\n    let min = null,\r\n        max = null;\r\n\r\n    arr.forEach(({ min: y0, max: y1 }) => {\r\n        min = min === null ? y0 : Math.min(min, y0);\r\n        max = max === null ? y1 : Math.max(max, y1);\r\n    });\r\n\r\n    return { min, max };\r\n};\r\n\r\nexport const boundBy = (x, left, right) => {\r\n    x = left === undefined ? x : Math.max(left, x);\r\n    x = right === undefined ? x : Math.min(right, x);\r\n    return x;\r\n};\r\n\r\nexport const relToAbs = (rel, a, b) => a + rel * (b - a);\r\n\r\nexport const absToRel = (abs, a, b) => (abs - a) / (b - a);\r\n\r\nexport const calcYBounds = (xData, yData, x0Rel, x1Rel, type) => {\r\n    if (!yData) return { min: 0, max: 0 };\r\n\r\n    let i = 1;\r\n    let j = xData.length - 1;\r\n\r\n    const x0 = relToAbs(x0Rel, xData[1], xData[j]);\r\n    const x1 = relToAbs(x1Rel, xData[1], xData[j]);\r\n\r\n    while (xData[i] < x0) i++;\r\n    while (xData[j] > x1) j--;\r\n\r\n    let min = yData[i],\r\n        max = yData[i];\r\n\r\n    for (let k = i + 1; k <= j; k++) {\r\n        const el = yData[k];\r\n        min = Math.min(min, el);\r\n        max = Math.max(max, el);\r\n    }\r\n\r\n    return { min: type === 'line' ? min : 0, max: max };\r\n};\r\n\r\nexport const findClosestIndex = (xData, xRel) => {\r\n    if (!xRel) return null;\r\n    let x = relToAbs(xRel, xData[1], xData[xData.length - 1]);\r\n    let i = 1;\r\n    while (xData[i] < x) i++;\r\n    i = (xData[i - 1] + xData[i]) / 2 < x ? i : i - 1;\r\n\r\n    return i;\r\n};\r\n\r\n/*\r\nexport const interpolate = (xData, yData, xRel) => {\r\n    if (!xRel) return null;\r\n    const x = relToAbs(xRel, xData[1], xData[xData.length - 1]);\r\n    let i = 1;\r\n    while (xData[i] < x) i++;\r\n    const y = yData[i - 1] + ((x - xData[i - 1]) * (yData[i] - yData[i - 1])) / (xData[i] - xData[i - 1]);\r\n    return y;\r\n};\r\n*/\r\n\r\nexport const getColumns = (types, columns) => {\r\n    const xKey = Object.keys(types).filter(key => types[key] === 'x')[0];\r\n    const xColumn = columns.filter(column => column[0] === xKey)[0];\r\n\r\n    const keys = Object.keys(types).filter(key => types[key] !== 'x');\r\n    const yColumns = keys.reduce((obj, key) => ({ ...obj, [key]: columns.filter(column => column[0] === key)[0] }), {});\r\n\r\n    return { xColumn, yColumns, keys };\r\n};\r\n\r\nexport const arrSum = (a, b) => {\r\n    if (!a) return [...b];\r\n    return a.map((el, i) => el + b[i]);\r\n};\r\n\r\nconst colorToGrb = c => {\r\n    c = c.replace(/ /g, '');\r\n    if (c[0] === '#') {\r\n        if (c.length === 4) {\r\n            // #rgb\r\n            return {\r\n                r: parseInt(c[1] + c[1], 16),\r\n                g: parseInt(c[2] + c[2], 16),\r\n                b: parseInt(c[3] + c[3], 16)\r\n            };\r\n        } else {\r\n            // #rrggbb\r\n            return {\r\n                r: parseInt(c.slice(1, 3), 16),\r\n                g: parseInt(c.slice(3, 5), 16),\r\n                b: parseInt(c.slice(5, 7), 16)\r\n            };\r\n        }\r\n    } else {\r\n        // rgb(r,g,b)\r\n        const sdf = c.slice(4, -1).split(',');\r\n        return {\r\n            r: +sdf[0],\r\n            g: +sdf[1],\r\n            b: +sdf[2]\r\n        };\r\n    }\r\n};\r\n\r\nconst rgbToString = ({ r, g, b }) => `rgb(${r}, ${g}, ${b})`;\r\n\r\nexport const calcOpacityColor = (c1, c2, opacity) => {\r\n    const { r: r1, g: g1, b: b1 } = colorToGrb(c1);\r\n    const { r: r2, g: g2, b: b2 } = colorToGrb(c2);\r\n    return rgbToString({\r\n        r: (opacity * r1 + (1 - opacity) * r2).toFixed(),\r\n        g: (opacity * g1 + (1 - opacity) * g2).toFixed(),\r\n        b: (opacity * b1 + (1 - opacity) * b2).toFixed()\r\n    });\r\n};\r\n","import { createSvgElement } from '../../helpers/elements';\r\nimport { absToRel, findClosestIndex } from '../../helpers/utils';\r\n\r\nconst INTERSECTION_LINES_COLOR = 'gray';\r\n\r\nconst generatePoints = (area, x, y, yBase) => {\r\n    const length = x.length;\r\n\r\n    if (!yBase) {\r\n        let xMin = x[1],\r\n            dx = x[length - 1] - xMin;\r\n        let points = `0,${y[1]} `;\r\n\r\n        for (let i = 2; i < length; i++) {\r\n            points += `${(x[i] - xMin) / dx},${y[i]} `;\r\n        }\r\n\r\n        return area ? `0,0 ${points} 1,0` : points;\r\n    } else {\r\n        let xMin = x[1],\r\n            dx = x[length - 1] - xMin;\r\n        let points = `0,${yBase[1] + y[1]} `;\r\n\r\n        for (let i = 2; i < length; i++) {\r\n            points += `${(x[i] - xMin) / dx},${yBase[i] + y[i]} `;\r\n        }\r\n\r\n        return area ? `0,0 ${points} 1,0` : points;\r\n    }\r\n};\r\n\r\nexport default class Line {\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(val) {\r\n        this._visible = val;\r\n        this._intersectionPoint0.setAttribute('opacity', +val);\r\n        this._chartLine.setAttribute('opacity', +val);\r\n        this._mapLine.setAttribute('opacity', +val);\r\n        this._intersectionLineH.setAttribute('stroke', val ? INTERSECTION_LINES_COLOR : 'transparent');\r\n    }\r\n\r\n    set yMapArea([y0, y1]) {\r\n        this.mapNode.setAttribute('transform', `scale(1 ${1 / (y1 - y0)}) translate(0 ${-y0})`);\r\n    }\r\n\r\n    set yChartArea([y0, y1]) {\r\n        this.node.setAttribute('transform', `scale(1 ${1 / (y1 - y0)}) translate(0 ${-y0})`);\r\n    }\r\n\r\n    constructor(area, keys, xColumn, yColumn, color) {\r\n        this._visible = true;\r\n        this._color = color;\r\n        this._xColumn = xColumn;\r\n        this._yColumn = yColumn;\r\n        this._area = area;\r\n\r\n        const points = generatePoints(area, xColumn, yColumn);\r\n        this._chartLine = createSvgElement(\r\n            area ? 'polygon' : 'polyline',\r\n            {\r\n                'stroke-linejoin': 'round',\r\n                'vector-effect': 'non-scaling-stroke',\r\n                points,\r\n                stroke: area ? 'none' : color,\r\n                fill: area ? color : 'none'\r\n            },\r\n            'chart-line'\r\n        );\r\n        this._mapLine = createSvgElement(\r\n            'polyline',\r\n            {\r\n                'stroke-linejoin': 'round',\r\n                'vector-effect': 'non-scaling-stroke',\r\n                points,\r\n                stroke: area ? 'none' : color,\r\n                fill: area ? color : 'none'\r\n            },\r\n            'map-line'\r\n        );\r\n\r\n        const intersectionLineV = createSvgElement(\r\n            'line',\r\n            { x1: 0, x2: 0, y0: 0, y1: 1, 'vector-effect': 'non-scaling-stroke', stroke: INTERSECTION_LINES_COLOR },\r\n            'intersection-line'\r\n        );\r\n\r\n        this.intersectionPoint = createSvgElement('g', {}, '');\r\n        this.intersectionPoint.appendChild(intersectionLineV);\r\n\r\n        if (!area) {\r\n            this._intersectionLineH = createSvgElement(\r\n                'line',\r\n                {\r\n                    x1: -1,\r\n                    x2: 1,\r\n                    y0: 0,\r\n                    y1: 0,\r\n                    'vector-effect': 'non-scaling-stroke',\r\n                    stroke: INTERSECTION_LINES_COLOR\r\n                },\r\n                'intersection-line'\r\n            );\r\n\r\n            this._intersectionPoint0 = createSvgElement(\r\n                'circle',\r\n                { r: 5, stroke: color, fill: 'white' },\r\n                'intersection-point'\r\n            );\r\n            this._intersectionPoint1 = createSvgElement('g', {}, '');\r\n            this._intersectionPoint2 = createSvgElement('g', {}, 'animated');\r\n            this._intersectionPoint3 = createSvgElement('g', {}, '');\r\n            this._intersectionPoint4 = createSvgElement('g', {}, 'animated');\r\n            this._intersectionPoint1.appendChild(this._intersectionPoint0);\r\n            this._intersectionPoint2.appendChild(this._intersectionPoint1);\r\n            this._intersectionPoint3.appendChild(this._intersectionLineH);\r\n            this._intersectionPoint3.appendChild(this._intersectionPoint2);\r\n            this._intersectionPoint4.appendChild(this._intersectionPoint3);\r\n            this.intersectionPoint.appendChild(this._intersectionPoint4);\r\n        }\r\n\r\n        this.mapNode = createSvgElement('g', {}, 'animated');\r\n        this.mapNode.appendChild(this._mapLine);\r\n\r\n        this.node = createSvgElement('g', {}, 'animated');\r\n        this.node.appendChild(this._chartLine);\r\n    }\r\n\r\n    onChange = yColumnBase => {\r\n        this._yColumnBase = yColumnBase;\r\n        const points = generatePoints(this._area, this._xColumn, this._yColumn, yColumnBase);\r\n        this._chartLine.setAttribute('points', points);\r\n        this._mapLine.setAttribute('points', points);\r\n    };\r\n\r\n    onMouseMove(xRel, x0, x1, y0, y1, svgW, svgH) {\r\n        let x = absToRel(xRel, x0, x1);\r\n        if (x < 0 || x > 1) {\r\n            this.intersectionPoint.style.display = 'none';\r\n            return;\r\n        }\r\n\r\n        this.intersectionPoint.style.display = 'initial';\r\n        const i = findClosestIndex(this._xColumn, xRel);\r\n        x = absToRel(this._xColumn[i], this._xColumn[1], this._xColumn[this._xColumn.length - 1]);\r\n        this.intersectionPoint.setAttribute('transform', `scale(${svgW} ${svgH}) translate(${absToRel(x, x0, x1)} 0) `);\r\n\r\n        if (!this._area) {\r\n            const y = this._yColumn[i];\r\n\r\n            this._intersectionPoint1.setAttribute('transform', `scale(${1 / svgW} ${1 / svgH})`);\r\n            this._intersectionPoint2.setAttribute('transform', `scale(1 ${y1 - y0})`);\r\n            this._intersectionPoint3.setAttribute('transform', `translate(0 ${y})`);\r\n            this._intersectionPoint4.setAttribute('transform', `scale(1 ${1 / (y1 - y0)}) translate(0 ${-y0})`);\r\n        }\r\n    }\r\n}\r\n","import { createSvgElement } from '../../helpers/elements';\r\nimport { calcOpacityColor } from '../../helpers/utils';\r\n\r\nconst generatePoints = (x, y, yBase) => {\r\n    // unused x\r\n    const length = x.length - 1;\r\n\r\n    if (!yBase) {\r\n        let points = `0,0 0,${y[1]} `;\r\n\r\n        for (let i = 2; i <= length; i++) {\r\n            points += `${(i - 1) / length},${y[i - 1]} ${(i - 1) / length},${y[i]} `;\r\n        }\r\n        points += `1,${y[length]} 1,0`;\r\n\r\n        return points;\r\n    } else {\r\n        let points = `0,0 0,${yBase[1] + y[1]} `;\r\n\r\n        for (let i = 2; i <= length; i++) {\r\n            points += `${(i - 1) / length},${yBase[i - 1] + y[i - 1]} ${(i - 1) / length},${yBase[i] + y[i]} `;\r\n        }\r\n        points += `1,${yBase[length] + y[length]} 1,0`;\r\n\r\n        return points;\r\n    }\r\n};\r\n\r\nexport default class Line {\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(val) {\r\n        this._visible = val;\r\n        this._chartLine.setAttribute('fill', val ? this._color : 'transparent');\r\n        this._mapLine.setAttribute('fill', val ? this._color : 'transparent');\r\n    }\r\n\r\n    set yMapArea([y0, y1]) {\r\n        this.mapNode.setAttribute('transform', `scale(1 ${1 / (y1 - y0)}) translate(0 ${-y0})`);\r\n    }\r\n\r\n    set yChartArea([y0, y1]) {\r\n        this.node.setAttribute('transform', `scale(1 ${1 / (y1 - y0)}) translate(0 ${-y0})`);\r\n    }\r\n\r\n    constructor(keys, xColumn, yColumn, color) {\r\n        this._visible = true;\r\n        this._color = color;\r\n        this._xColumn = xColumn;\r\n        this._yColumn = yColumn;\r\n\r\n        this._chartLine = createSvgElement(\r\n            'polygon',\r\n            { 'vector-effect': 'non-scaling-stroke', 'stroke-width': 0, fill: color },\r\n            'chart-bar'\r\n        );\r\n        this._selectedBar = createSvgElement(\r\n            'rect',\r\n            { 'vector-effect': 'non-scaling-stroke', 'stroke-width': 0, fill: color },\r\n            'chart-bar'\r\n        );\r\n        this._mapLine = createSvgElement(\r\n            'polygon',\r\n            { 'vector-effect': 'non-scaling-stroke', 'stroke-width': 0, fill: color },\r\n            'map-bar'\r\n        );\r\n\r\n        this.mapNode = createSvgElement('g', {}, 'animated');\r\n        this.mapNode.appendChild(this._mapLine);\r\n\r\n        this.node = createSvgElement('g', {}, 'animated');\r\n        this.node.appendChild(this._chartLine);\r\n        this.node.appendChild(this._selectedBar);\r\n    }\r\n\r\n    onChange = yColumnBase => {\r\n        this._yColumnBase = yColumnBase;\r\n        const points = generatePoints(this._xColumn, this._yColumn, yColumnBase);\r\n        this._chartLine.setAttribute('points', points);\r\n        this._mapLine.setAttribute('points', points);\r\n    };\r\n\r\n    onMouseMove(xMouse) {\r\n        if (!xMouse) {\r\n            this._chartLine.setAttribute('fill', this._visible ? this._color : 'transparent');\r\n            this._selectedBar.setAttribute('fill', 'transparent');\r\n            return;\r\n        }\r\n\r\n        if (this._visible) {\r\n            const step = 1 / (this._xColumn.length - 1);\r\n            const i = Math.ceil(xMouse / step);\r\n            this._selectedBar.setAttribute('x', (i - 1) * step);\r\n            this._selectedBar.setAttribute('y', this._yColumnBase ? this._yColumnBase[i] : 0);\r\n            this._selectedBar.setAttribute('width', step);\r\n            this._selectedBar.setAttribute('height', this._yColumn[i]);\r\n            this._selectedBar.setAttribute('fill', this._color);\r\n            const background = window.getComputedStyle(document.body).backgroundColor;\r\n            this._chartLine.setAttribute('fill', calcOpacityColor(this._color, background, 0.6));\r\n        }\r\n    }\r\n}\r\n","export const tooltipDate = ms => {\r\n    const date = new Date(ms);\r\n    const dayOfWeek = days[date.getDay()];\r\n    const dayOfMonth = date.getDate();\r\n    const month = months[date.getMonth()];\r\n    const year = date.getFullYear();\r\n    return `${dayOfWeek}, ${dayOfMonth} ${month} ${year}`;\r\n};\r\n\r\nconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'Jule', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n","import { createSvgElement } from '../../helpers/elements';\r\nimport './tooltip.css';\r\nimport { tooltipDate } from '../../helpers/date-time';\r\n\r\nconst MARGIN = 20;\r\nconst PADDING = 10;\r\nconst WIDTH = 180;\r\nconst LINE_HEIGHT = 18;\r\n\r\nexport default class Tooltip {\r\n    constructor(parentNode) {\r\n        this.transformY = createSvgElement('g', {}, 'tt_wrapper');\r\n        this.transformX = createSvgElement('g', {}, 'tt_wrapper');\r\n        this.rect = createSvgElement(\r\n            'rect',\r\n            { x: MARGIN, y: MARGIN, rx: 15, ry: 15, width: WIDTH, transform: 'scale(1 -1)' },\r\n            'tt_rect'\r\n        );\r\n        this.text = createSvgElement('text', {\r\n            x: MARGIN + PADDING,\r\n            y: MARGIN + PADDING + LINE_HEIGHT,\r\n            transform: 'scale(1 -1)'\r\n        });\r\n        this.transformY.appendChild(this.transformX);\r\n        this.transformX.appendChild(this.rect);\r\n        this.transformX.appendChild(this.text);\r\n        parentNode.appendChild(this.transformY);\r\n    }\r\n\r\n    resize() {\r\n        const svgBox = this.transformY.parentNode.getBoundingClientRect();\r\n        this.transformY.setAttribute('transform', `translate(0 ${svgBox.height})`);\r\n    }\r\n\r\n    render(xRel, xAbs, data) {\r\n        if (!data || xRel < 0 || xRel > 1) {\r\n            this.transformY.setAttribute('opacity', '0');\r\n            return;\r\n        }\r\n\r\n        this.transformY.setAttribute('opacity', '1');\r\n        this.rect.setAttribute('height', (data.length + 1) * LINE_HEIGHT + 2 * PADDING);\r\n\r\n        const svgBox = this.transformY.parentNode.getBoundingClientRect();\r\n\r\n        while (this.text.childNodes.length) {\r\n            this.text.removeChild(this.text.childNodes[0]);\r\n        }\r\n\r\n        const xText = createSvgElement('tspan', {}, 'tt_bold');\r\n        xText.textContent = tooltipDate(xAbs);\r\n        this.text.appendChild(xText);\r\n\r\n        data.forEach(({ y, color, name }) => {\r\n            const yName = createSvgElement('tspan', { x: MARGIN + PADDING, dy: LINE_HEIGHT });\r\n            yName.textContent = `${name}: `;\r\n            const yVal = createSvgElement(\r\n                'tspan',\r\n                { fill: color, 'text-anchor': 'end', x: MARGIN + WIDTH - PADDING },\r\n                'tt_bold'\r\n            );\r\n            yVal.textContent = (+y).toFixed(2);\r\n            this.text.appendChild(yName);\r\n            this.text.appendChild(yVal);\r\n        });\r\n\r\n        if (xRel < 0.5) {\r\n            this.transformX.setAttribute('transform', `translate(${xRel * svgBox.width} 0)`);\r\n        } else {\r\n            this.transformX.setAttribute('transform', `translate(${xRel * svgBox.width - 2 * MARGIN - WIDTH} 0)`);\r\n        }\r\n    }\r\n}\r\n","import { createSvgElement } from '../../helpers/elements';\r\nimport './grid.css';\r\nimport { absToRel } from '../../helpers/utils';\r\n\r\nconst ROW_HEIGHT = 18 * 10;\r\nconst COL_WIDTH = 18 * 10;\r\n\r\nexport default class Grid {\r\n    constructor(parentNode) {\r\n        this.node = createSvgElement('g', {});\r\n        this.transform = createSvgElement('g', {}, 'grid_wrapper');\r\n\r\n        parentNode.appendChild(this.node);\r\n        this.node.appendChild(this.transform);\r\n        this.resize();\r\n    }\r\n\r\n    resize() {\r\n        const { width, height } = this.node.parentNode.getBoundingClientRect();\r\n        this.node.setAttribute('transform', `scale(${width} ${height})`);\r\n    }\r\n\r\n    render(x0, x1, y0, y1) {\r\n        const { height, width } = this.node.parentNode.getBoundingClientRect();\r\n\r\n        const countV = height / ROW_HEIGHT;\r\n        const countH = width / COL_WIDTH;\r\n\r\n        let i = 0;\r\n        while ((y1 - y0) / sdf[i] < countV) i++;\r\n        const yStep = sdf[i];\r\n        let j = 0;\r\n        while ((x1 - x0) / sdf[j] < countH) j++;\r\n        const xStep = sdf[j];\r\n\r\n        this.transform.setAttribute('transform', `scale(1 ${1 / (y1 - y0)}) translate(0 ${-y0})`);\r\n\r\n        while (this.transform.childNodes.length) {\r\n            this.transform.removeChild(this.transform.childNodes[0]);\r\n        }\r\n\r\n        i = Math.ceil(y0 / yStep);\r\n        let yCur = i * yStep;\r\n\r\n        while (yCur <= y1) {\r\n            const line = createSvgElement(\r\n                'line',\r\n                { x1: 0, x2: 1, y1: yCur, y2: yCur, 'vector-effect': 'non-scaling-stroke' },\r\n                'grid_line'\r\n            );\r\n            this.transform.appendChild(line);\r\n\r\n            yCur += yStep;\r\n        }\r\n\r\n        j = Math.ceil(x0 / xStep);\r\n        let xCur = j * xStep;\r\n\r\n        while (xCur <= x1) {\r\n            const line = createSvgElement(\r\n                'line',\r\n                {\r\n                    y1: y0,\r\n                    y2: y1,\r\n                    x1: absToRel(xCur, x0, x1),\r\n                    x2: absToRel(xCur, x0, x1),\r\n                    'vector-effect': 'non-scaling-stroke'\r\n                },\r\n                'grid_line'\r\n            );\r\n            this.transform.appendChild(line);\r\n\r\n            xCur += xStep;\r\n        }\r\n    }\r\n}\r\n\r\nconst sdf = [\r\n    100000000,\r\n    50000000,\r\n    20000000,\r\n    10000000,\r\n    5000000,\r\n    2000000,\r\n    1000000,\r\n    500000,\r\n    200000,\r\n    100000,\r\n    50000,\r\n    20000,\r\n    10000,\r\n    5000,\r\n    2000,\r\n    1000,\r\n    500,\r\n    200,\r\n    100,\r\n    50,\r\n    20,\r\n    10,\r\n    5,\r\n    2,\r\n    1,\r\n    0.5,\r\n    0.2,\r\n    0.1,\r\n    0.05,\r\n    0.02,\r\n    0.01\r\n];\r\n","import createCheckBox from '../check-box/check-box';\r\nimport Line from './line';\r\nimport Bars from './bars';\r\nimport { createElement, createSvgElement } from '../../helpers/elements';\r\nimport './chart.css';\r\nimport { absToRel, arrSum, boundBy, calcYBounds, findClosestIndex, getColumns, minmax } from '../../helpers/utils';\r\nimport { addDragAndDropListeners, addListener, removeListener } from '../../helpers/event-listeners';\r\nimport createMap from '../map/map';\r\nimport Tooltip from '../tooltip/tooltip';\r\nimport Grid from '../grid/grid';\r\n\r\nconst typeToConstructor = {\r\n    line: (...props) => new Line(false, ...props),\r\n    bar: (...props) => new Bars(...props),\r\n    area: (...props) => new Line(true, ...props)\r\n};\r\n\r\nconst MIN_WIN_WIDTH = 0.05;\r\n\r\nexport default (data, title) => {\r\n    const chartSvg = createSvgElement('svg', {}, 'ctr_chart');\r\n\r\n    const { colors, names, types, columns, percentage, stacked, y_scaled: doubleY } = data;\r\n\r\n    let { xColumn, yColumns, keys } = getColumns(types, columns);\r\n    yColumns = Object.entries(yColumns)\r\n        .map(([key, col]) => ({ [key]: col.map((el, i) => (i ? el / 1000 : el)) }))\r\n        .reduce((obj, q) => Object.assign(obj, q), {});\r\n    let x0 = 0;\r\n    let x1 = 1;\r\n    let y0 = 0;\r\n    let y1 = 1;\r\n    let xMouse = null;\r\n    let mouseXFixed = false;\r\n\r\n    let keyToYBound = {};\r\n    let keyToGlobalYBound = {};\r\n    const getYBounds = key =>\r\n        keyToYBound[key] || (keyToYBound[key] = calcYBounds(xColumn, yColumns[key], x0, x1, types[key]));\r\n    const getGlobalYBounds = key =>\r\n        keyToGlobalYBound[key] || (keyToGlobalYBound[key] = calcYBounds(xColumn, yColumns[key], 0, 1, types[key]));\r\n    const resetYBoundsCash = () => (keyToYBound = {});\r\n\r\n    const chartViewportTransform = createSvgElement('g');\r\n    const chartAreaXTransform = createSvgElement('g');\r\n\r\n    const wrapper = createElement('crt_wrapper');\r\n    const controls = createElement('crt_controls');\r\n    const header = createElement();\r\n    header.textContent = title;\r\n\r\n    let tooltip, grid;\r\n\r\n    wrapper.appendChild(header);\r\n    wrapper.appendChild(chartSvg);\r\n    chartSvg.appendChild(chartViewportTransform);\r\n    chartViewportTransform.appendChild(chartAreaXTransform);\r\n    wrapper.appendChild(controls);\r\n\r\n    const init = () => {\r\n        const visualisation = keys\r\n            .reverse()\r\n            .map(key => ({\r\n                [key]: typeToConstructor[types[key]](key, xColumn, yColumns[key], colors[key])\r\n            }))\r\n            .reduce((obj, line) => Object.assign(obj, line), {});\r\n\r\n        const {\r\n            mapNode,\r\n            setMapViewport,\r\n            appendBeforeOverlay,\r\n            setMapWindow,\r\n            windowLeftEdge,\r\n            windowRightEdge,\r\n            mapWindow\r\n        } = createMap();\r\n\r\n        const updateIntersections = xRel => {\r\n            const { width, height } = chartSvg.getBoundingClientRect();\r\n            if (xRel !== -1) xMouse = xRel;\r\n\r\n            const i = findClosestIndex(xColumn, xMouse);\r\n\r\n            const tooltipData =\r\n                xMouse &&\r\n                keys\r\n                    .filter(key => visualisation[key].visible)\r\n                    .map(key => ({\r\n                        y: yColumns[key][i],\r\n                        color: colors[key],\r\n                        name: names[key]\r\n                    }));\r\n            tooltip.render(absToRel(xMouse, x0, x1), xColumn[i], tooltipData);\r\n\r\n            keys.forEach(key => {\r\n                visualisation[key].onMouseMove(xMouse, x0, x1, y0, y1, width, height);\r\n            });\r\n        };\r\n\r\n        const updateYArea = () => {\r\n            let yColumnSum = null;\r\n\r\n            keys.filter(key => visualisation[key].visible).forEach(key => {\r\n                visualisation[key].onChange(stacked ? yColumnSum : null);\r\n                yColumnSum = arrSum(yColumnSum, yColumns[key]);\r\n            });\r\n\r\n            const { min, max } = stacked\r\n                ? calcYBounds(xColumn, yColumnSum, x0, x1, 'bar')\r\n                : minmax(keys.filter(key => visualisation[key].visible).map(key => getYBounds(key)));\r\n\r\n            // todo: need only one time\r\n            const { min: globalMin, max: globalMax } = stacked\r\n                ? calcYBounds(xColumn, yColumnSum, 0, 1, 'bar')\r\n                : minmax(keys.filter(key => visualisation[key].visible).map(key => getGlobalYBounds(key)));\r\n\r\n            keys.forEach(key => {\r\n                visualisation[key].yChartArea = [min, max];\r\n                visualisation[key].yMapArea = [globalMin, globalMax];\r\n            });\r\n\r\n            y0 = min;\r\n            y1 = max;\r\n            grid.render(x0, x1, y0, y1);\r\n            updateIntersections(-1);\r\n        };\r\n\r\n        const deepUpdateYArea = () => {\r\n            resetYBoundsCash();\r\n            updateYArea();\r\n        };\r\n\r\n        const setUserViewport = (w, h) => {\r\n            chartViewportTransform.setAttribute('transform', `scale(${w} ${h})`);\r\n        };\r\n\r\n        const setXChartArea = (x0, x1) => {\r\n            chartAreaXTransform.setAttribute(\r\n                'transform',\r\n                `\r\n                    scale(${1 / (x1 - x0)} 1) \r\n                    translate(${-x0} 0)\r\n                `\r\n            );\r\n            deepUpdateYArea();\r\n        };\r\n\r\n        const updateXBounds = (a, b) => {\r\n            x0 = a;\r\n            x1 = b;\r\n            setXChartArea(x0, x1);\r\n            setMapWindow(x0, x1);\r\n        };\r\n\r\n        const mount = () => {\r\n            grid = new Grid(chartSvg);\r\n            tooltip = new Tooltip(chartSvg);\r\n\r\n            wrapper.insertBefore(mapNode, controls);\r\n\r\n            keys.forEach(key => {\r\n                chartAreaXTransform.appendChild(visualisation[key].node);\r\n            });\r\n\r\n            keys.forEach(key => {\r\n                appendBeforeOverlay(visualisation[key].mapNode);\r\n            });\r\n\r\n            keys.reverse().forEach(key => {\r\n                visualisation[key].intersectionPoint &&\r\n                    chartSvg.insertBefore(visualisation[key].intersectionPoint, tooltip.transformY);\r\n\r\n                controls.appendChild(\r\n                    createCheckBox(colors[key], names[key], value => {\r\n                        visualisation[key].visible = value;\r\n                        updateYArea();\r\n                    })\r\n                );\r\n            });\r\n        };\r\n\r\n        const onResize = () => {\r\n            const { width: svgWidth, height: svgHeight } = chartSvg.getBoundingClientRect();\r\n            const { width: mapWidth, height: mapHeight } = mapNode.getBoundingClientRect();\r\n            setUserViewport(svgWidth, svgHeight);\r\n            setMapViewport(mapWidth, mapHeight);\r\n\r\n            grid.resize();\r\n            tooltip.resize();\r\n            setMapWindow(x0, x1);\r\n            updateIntersections(-1);\r\n        };\r\n\r\n        mount();\r\n        deepUpdateYArea();\r\n        onResize();\r\n        addListener(window, 'resize', onResize);\r\n\r\n        const getMapX = x => {\r\n            const rect = mapNode.getBoundingClientRect();\r\n            return (x - rect.left) / rect.width;\r\n        };\r\n\r\n        const getChartX = x => {\r\n            const rect = chartSvg.getBoundingClientRect();\r\n            return (x - rect.left) / rect.width;\r\n        };\r\n\r\n        addDragAndDropListeners(mapWindow, coords => {\r\n            const width = x1 - x0;\r\n            const left = getMapX(coords.x);\r\n            const right = left + width;\r\n            updateXBounds(boundBy(left, 0, 1 - width), boundBy(right, width, 1));\r\n        });\r\n        addDragAndDropListeners(windowLeftEdge, coords => {\r\n            const left = getMapX(coords.x + 10);\r\n            updateXBounds(boundBy(left, 0, x1 - MIN_WIN_WIDTH), x1);\r\n        });\r\n        addDragAndDropListeners(windowRightEdge, coords => {\r\n            const right = getMapX(coords.x);\r\n            updateXBounds(x0, boundBy(right, x0 + MIN_WIN_WIDTH, 1));\r\n        });\r\n\r\n        const onMouseMove = e => updateIntersections(x0 + (x1 - x0) * getChartX(e.clientX));\r\n        const onMouseLeave = () => {\r\n            if (!mouseXFixed) updateIntersections();\r\n        };\r\n        addListener(chartSvg, 'mousemove', onMouseMove);\r\n        addListener(chartSvg, 'mouseleave', onMouseLeave);\r\n        addListener(chartSvg, 'touchmove', e => updateIntersections(x0 + (x1 - x0) * getChartX(e.touches[0].clientX)));\r\n        addListener(chartSvg, 'mousedown', () => {\r\n            if (mouseXFixed) {\r\n                addListener(chartSvg, 'mousemove', onMouseMove);\r\n            } else {\r\n                removeListener(chartSvg, 'mousemove', onMouseMove);\r\n            }\r\n            mouseXFixed = !mouseXFixed;\r\n        });\r\n    };\r\n\r\n    return {\r\n        node: wrapper,\r\n        init\r\n    };\r\n};\r\n","import { createElement, createSvgElement } from '../../helpers/elements';\r\nimport './map.css';\r\n\r\nexport default () => {\r\n    const mapSvg = createSvgElement('svg', {}, 'map-chart');\r\n    const map = createElement('map-container');\r\n    const svgWrapper = createElement('map-svg-wrapper');\r\n    const mapViewportTransform = createSvgElement('g');\r\n\r\n    svgWrapper.appendChild(mapSvg);\r\n    map.appendChild(svgWrapper);\r\n    mapSvg.appendChild(mapViewportTransform);\r\n\r\n    const mapOverlayLeft = createSvgElement('rect', { x: 0, y: 0, width: 0, height: 1 }, 'map-overlay');\r\n    const mapOverlayRight = createSvgElement('rect', { x: 1, y: 0, width: 0, height: 1 }, 'map-overlay');\r\n    const mapWindow = createElement('map-window', 'div');\r\n    const windowLeftEdge = createElement('map-left-edge', 'div');\r\n    const windowRightEdge = createElement('map-right-edge', 'div');\r\n\r\n    mapViewportTransform.append(mapOverlayLeft);\r\n    mapViewportTransform.append(mapOverlayRight);\r\n    map.append(mapWindow);\r\n    map.append(windowLeftEdge);\r\n    map.append(windowRightEdge);\r\n\r\n    const setMapViewport = (w, h) => {\r\n        mapViewportTransform.setAttribute('transform', `scale(${w} ${h})`);\r\n    };\r\n\r\n    const appendBeforeOverlay = node => {\r\n        mapViewportTransform.insertBefore(node, mapOverlayLeft);\r\n    };\r\n\r\n    const setMapWindow = (x0, x1) => {\r\n        mapOverlayLeft.setAttribute('width', x0);\r\n        mapOverlayRight.setAttribute('x', x1);\r\n        mapOverlayRight.setAttribute('width', 1 - x1);\r\n\r\n        const mapWidth = map.getBoundingClientRect().width;\r\n        mapWindow.style.left = `${x0 * mapWidth}px`;\r\n        mapWindow.style.width = `${(x1 - x0) * mapWidth}px`;\r\n        windowLeftEdge.style.left = `${x0 * mapWidth - 10}px`;\r\n        windowRightEdge.style.left = `${x1 * mapWidth - 1}px`;\r\n    };\r\n\r\n    return {\r\n        mapNode: map,\r\n        appendBeforeOverlay,\r\n        setMapViewport,\r\n        setMapWindow,\r\n        windowLeftEdge,\r\n        windowRightEdge,\r\n        mapWindow\r\n    };\r\n};\r\n","import './switch-button.css';\r\nimport { addListener } from '../../helpers/event-listeners';\r\n\r\nconst nightLabel = 'Switch to Day Mode';\r\nconst dayLabel = 'Switch to Night Mode';\r\n\r\nexport default () => {\r\n    const btn = document.createElement('div');\r\n    btn.id = 'btn-switch';\r\n\r\n    let night = false;\r\n    btn.textContent = dayLabel;\r\n\r\n    const switchToNight = () => {\r\n        btn.textContent = nightLabel;\r\n        document.body.className = 'night';\r\n        night = true;\r\n    };\r\n\r\n    const switchToDay = () => {\r\n        btn.textContent = dayLabel;\r\n        document.body.className = '';\r\n        night = false;\r\n    };\r\n\r\n    addListener(btn, 'click', () => {\r\n        if (night) {\r\n            switchToDay();\r\n        } else {\r\n            switchToNight();\r\n        }\r\n    });\r\n\r\n    return btn;\r\n};\r\n","import './global.css';\r\nimport createChart from './components/chart/chart';\r\nimport createFooter from './components/footer/footer';\r\nimport data2 from './data/2/overview.json';\r\nimport data3 from './data/3/overview.json';\r\nimport data4 from './data/4/overview.json';\r\nimport data5 from './data/5/overview.json';\r\nimport { createElement } from './helpers/elements';\r\n\r\nconst charts = createElement();\r\nconst root = document.getElementById('root');\r\nroot.appendChild(charts);\r\nroot.appendChild(createFooter());\r\n\r\nasync function getComponent() {\r\n    return import(/* webpackChunkName: \"data\" */ './data/1/overview.json')\r\n        .then(({ default: data }) => {\r\n            return data;\r\n        })\r\n        .catch(error => 'An error occurred while loading the component');\r\n}\r\n\r\ngetComponent().then(data => {\r\n    [data].forEach(chartData => {\r\n        const { node, init } = createChart(chartData, 'Chart #1');\r\n        charts.appendChild(node);\r\n        init();\r\n    });\r\n});\r\n\r\n[data2].forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #2');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n\r\n[data3].forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #3');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n\r\n[data4].forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #4');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n\r\n[data5].forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #5');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n","import createSwitchButton from '../switch-button/switch-button';\r\nimport './footer.css';\r\n\r\nexport default () => {\r\n    const footer = document.createElement('div');\r\n    footer.id = 'footer';\r\n    footer.appendChild(createSwitchButton());\r\n    return footer;\r\n};\r\n"],"sourceRoot":""}