{"version":3,"sources":["components/icons/check-icon.svg","helpers/elements.js","helpers/event-listeners.js","components/check-box/check-box.js","components/icons/checkbox-icon.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","components/chart/get-lines.js","components/chart/chart.js","components/chart/map.js","helpers/utils.js","components/switch-button/switch-button.js","index.js","components/footer/footer.js"],"names":["module","exports","__webpack_require__","p","createElement","className","tag","arguments","length","undefined","node","document","createSvgElement","attrs","createElementNS","baseVal","Object","keys","forEach","key","setAttribute","addListener","element","event","listener","addEventListener","removeListener","removeEventListener","addDragAndDropListeners","getTouchCoords","e","x","touches","clientX","y","clientY","offset","offsetX","offsetY","getMouseOffset","onMouseMove","mouseCoords","getMouseCoords","cornerCoords","body","onMouseUp","box","getBoundingClientRect","touchCoords","left","top","getTouchOffset","onTouchMove","onTouchEnd","check_box_check_box","color","text","onChange","checked","wrapper","mark","style","label","textContent","appendChild","img","icon","createCheckIcon","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","source","ownKeys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","get_lines","_ref","types","columns","colors","xKey","xColumn","column","yKeys","yColumns","reduce","yKey","_generatePathAndFindM","xMin","dx","y0","y1","d","Math","min","max","generatePathAndFindMinMaxY","points","stroke","visible","chartLine","stroke-linejoin","vector-effect","mapLine","mapAreaYTransform","chartAreaYTransform","chartLineNode","setYChartArea","mapLineNode","setYMapArea","visibility","flag","getLine","chart_chart","data","title","chartSvg","x0","x1","chartViewportTransform","chartAreaXTransform","names","controls","header","init","lines","getLines","_createMap","mapSvg","map","mapViewportTransform","mapOverlayLeft","width","height","mapOverlayRight","mapWindow","windowLeftEdge","windowRightEdge","append","mapNode","appendBeforeOverlay","insertBefore","setMapViewport","w","h","setMapWindow","mapWidth","createMap","updateYChartArea","_minmax","arr","excluded","minmax","updateXBounds","a","b","setXChartArea","onResize","_chartSvg$getBounding","svgWidth","svgHeight","_mapNode$getBoundingC","mapHeight","createCheckBox","window","getMapX","rect","coords","switch_button_switch_button","btn","id","night","charts","root","getElementById","footer","createSwitchButton","createFooter","chartData","_createChart","createChart"],"mappings":"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","file":"static/js/main.ebbe1b6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check-icon.cc4bfc9f.svg\";","export const createElement = (className, tag = 'div') => {\r\n    const node = document.createElement(tag);\r\n    if (className) node.className = className;\r\n    return node;\r\n};\r\n\r\nexport const createSvgElement = (tag, attrs, className) => {\r\n    const node = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    if (className) {\r\n        node.className.baseVal = className;\r\n    }\r\n    if (attrs) {\r\n        Object.keys(attrs).forEach(key => {\r\n            node.setAttribute(key, attrs[key]);\r\n        });\r\n    }\r\n    return node;\r\n};\r\n","export const addListener = (element, event, listener) => {\r\n    element.addEventListener(event, listener, false);\r\n};\r\n\r\nexport const removeListener = (element, event, listener) => {\r\n    element.removeEventListener(event, listener);\r\n};\r\n\r\nexport const addDragAndDropListeners = (element, listener) => {\r\n    const getMouseCoords = e => ({ x: e.clientX, y: e.clientY });\r\n    const getTouchCoords = e => ({ x: e.touches[0].clientX, y: e.touches[0].clientY });\r\n    const getMouseOffset = e => ({ x: e.offsetX, y: e.offsetY });\r\n    const getTouchOffset = e => {\r\n        const box = element.getBoundingClientRect();\r\n        const touchCoords = getTouchCoords(e);\r\n        return {\r\n            x: touchCoords.x - box.left,\r\n            y: touchCoords.y - box.top\r\n        };\r\n    };\r\n\r\n    addListener(element, 'mousedown', e => {\r\n        const offset = getMouseOffset(e);\r\n\r\n        const onMouseMove = e => {\r\n            const mouseCoords = getMouseCoords(e);\r\n            const cornerCoords = { x: mouseCoords.x - offset.x, y: mouseCoords.y + offset.y };\r\n            listener(cornerCoords);\r\n        };\r\n\r\n        function onMouseUp() {\r\n            removeListener(document.body, 'mousemove', onMouseMove);\r\n            removeListener(document.body, 'mouseup', onMouseUp);\r\n        }\r\n\r\n        addListener(document.body, 'mousemove', onMouseMove);\r\n        addListener(document.body, 'mouseup', onMouseUp);\r\n    });\r\n\r\n    addListener(element, 'touchstart', e => {\r\n        const offset = getTouchOffset(e);\r\n\r\n        const onTouchMove = e => {\r\n            const touchCoords = getTouchCoords(e);\r\n            const cornerCoords = { x: touchCoords.x - offset.x, y: touchCoords.y + offset.y };\r\n            listener(cornerCoords);\r\n        };\r\n\r\n        function onTouchEnd() {\r\n            removeListener(document.body, 'touchmove', onTouchMove);\r\n            removeListener(document.body, 'touchend', onTouchEnd);\r\n            removeListener(document.body, 'touchcancel', onTouchEnd);\r\n        }\r\n\r\n        addListener(document.body, 'touchmove', onTouchMove);\r\n        addListener(document.body, 'touchend', onTouchEnd);\r\n        addListener(document.body, 'touchcancel', onTouchEnd);\r\n    });\r\n};\r\n","import './check-box.css';\r\nimport { createElement } from '../../helpers/elements';\r\nimport { addListener } from '../../helpers/event-listeners';\r\nimport createCheckIcon from '../icons/checkbox-icon';\r\n\r\nconst uncheckedMark = 'cb_unchecked-mark';\r\nconst checkedMark = 'cb_checked-mark';\r\n\r\nexport default (color, text, onChange) => {\r\n    let checked = true;\r\n\r\n    const wrapper = createElement('cb_wrapper');\r\n\r\n    const mark = createElement(checkedMark);\r\n    mark.style.color = color;\r\n\r\n    const label = createElement('cb_label');\r\n    label.textContent = text;\r\n\r\n    wrapper.appendChild(mark);\r\n    wrapper.appendChild(label);\r\n\r\n    mark.appendChild(createCheckIcon());\r\n\r\n    addListener(wrapper, 'click', () => {\r\n        checked = !checked;\r\n        onChange && onChange(checked);\r\n        mark.className = checked ? checkedMark : uncheckedMark;\r\n    });\r\n\r\n    return wrapper;\r\n};\r\n","import icon from './check-icon.svg';\r\nimport { createElement } from '../../helpers/elements';\r\n\r\nexport default () => {\r\n    const img = createElement('icon', 'img');\r\n    img.setAttribute('src', icon);\r\n    return img;\r\n};\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import { createSvgElement } from '../../helpers/elements';\r\n\r\nconst generatePathAndFindMinMaxY = (x, y) => {\r\n    const length = x.length;\r\n\r\n    let xMin = x[1],\r\n        dx = x[length - 1] - xMin,\r\n        y0 = y[1],\r\n        y1 = y[1];\r\n    let d = '' + (x[1] - xMin) / dx + ',' + y[1] + ' ';\r\n\r\n    for (let i = 2; i < length; i++) {\r\n        d += '' + (x[i] - xMin) / dx + ',' + y[i] + ' ';\r\n        y0 = Math.min(y[i], y0);\r\n        y1 = Math.max(y[i], y1);\r\n    }\r\n\r\n    return { d, y0, y1 };\r\n};\r\n\r\nconst getLine = (points, stroke) => {\r\n    let visible = true;\r\n\r\n    const chartLine = createSvgElement(\r\n        'polyline',\r\n        { 'stroke-linejoin': 'round', 'vector-effect': 'non-scaling-stroke', points, stroke },\r\n        'line'\r\n    );\r\n\r\n    const mapLine = createSvgElement(\r\n        'polyline',\r\n        { 'stroke-linejoin': 'round', 'vector-effect': 'non-scaling-stroke', points, stroke },\r\n        'line'\r\n    );\r\n\r\n    const mapAreaYTransform = createSvgElement('g', {}, 'animated');\r\n\r\n    mapAreaYTransform.appendChild(mapLine);\r\n\r\n    const chartAreaYTransform = createSvgElement('g', {}, 'animated');\r\n\r\n    chartAreaYTransform.appendChild(chartLine);\r\n\r\n    const setYChartArea = (y0, y1) => {\r\n        chartAreaYTransform.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(1 ${1 / (y1 - y0)}) \r\n            translate(0 ${-y0})\r\n        `\r\n        );\r\n    };\r\n\r\n    const setYMapArea = (y0, y1) => {\r\n        mapAreaYTransform.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(1 ${1 / (y1 - y0)}) \r\n            translate(0 ${-y0})\r\n        `\r\n        );\r\n    };\r\n\r\n    const visibility = flag => {\r\n        if (flag === undefined) {\r\n            /* reading */\r\n            return visible;\r\n        } else {\r\n            /* writing */\r\n            visible = flag;\r\n            chartLine.setAttribute('stroke', flag ? stroke : 'transparent');\r\n            mapLine.setAttribute('stroke', flag ? stroke : 'transparent');\r\n        }\r\n    };\r\n\r\n    return {\r\n        chartLineNode: chartAreaYTransform,\r\n        setYChartArea,\r\n        mapLineNode: mapAreaYTransform,\r\n        setYMapArea,\r\n        visibility\r\n    };\r\n};\r\n\r\nexport default ({ types, columns, colors }) => {\r\n    const xKey = Object.keys(types).filter(key => types[key] === 'x')[0];\r\n    const xColumn = columns.filter(column => column[0] === xKey)[0];\r\n\r\n    const yKeys = Object.keys(types).filter(key => types[key] !== 'x');\r\n    const yColumns = yKeys.reduce(\r\n        (obj, key) => ({ ...obj, [key]: columns.filter(column => column[0] === key)[0] }),\r\n        {}\r\n    );\r\n\r\n    const yKeysToLines = yKeys.reduce((obj, yKey) => {\r\n        const { d, y0, y1 } = generatePathAndFindMinMaxY(xColumn, yColumns[yKey]);\r\n        const line = getLine(d, colors[yKey]);\r\n        return {\r\n            ...obj,\r\n            [yKey]: {\r\n                y0,\r\n                y1,\r\n                ...line\r\n            }\r\n        };\r\n    }, {});\r\n\r\n    return yKeysToLines;\r\n};\r\n","import createCheckBox from '../check-box/check-box';\r\nimport getLines from './get-lines';\r\nimport { createElement, createSvgElement } from '../../helpers/elements';\r\nimport './chart.css';\r\nimport { minmax } from '../../helpers/utils';\r\nimport { addDragAndDropListeners, addListener } from '../../helpers/event-listeners';\r\nimport createMap from './map';\r\n\r\nexport default (data, title) => {\r\n    const chartSvg = createSvgElement('svg', {}, 'ctr_chart');\r\n\r\n    let x0 = 0.1;\r\n    let x1 = 0.8;\r\n\r\n    const chartViewportTransform = createSvgElement('g');\r\n    const chartAreaXTransform = createSvgElement('g');\r\n\r\n    const { colors, names } = data;\r\n\r\n    const wrapper = createElement('crt_wrapper');\r\n    const controls = createElement('crt_controls');\r\n    const header = createElement();\r\n    header.textContent = title;\r\n\r\n    wrapper.appendChild(header);\r\n    wrapper.appendChild(chartSvg);\r\n    chartSvg.appendChild(chartViewportTransform);\r\n    chartViewportTransform.appendChild(chartAreaXTransform);\r\n    wrapper.appendChild(controls);\r\n\r\n    const init = () => {\r\n        const lines = getLines(data);\r\n        const {\r\n            mapNode,\r\n            setMapViewport,\r\n            appendBeforeOverlay,\r\n            setMapWindow,\r\n            windowLeftEdge,\r\n            windowRightEdge,\r\n            mapWindow\r\n        } = createMap();\r\n\r\n        const keys = Object.keys(colors);\r\n\r\n        const updateYChartArea = () => {\r\n            keys.forEach(key => {\r\n                const { min, max } = minmax(\r\n                    keys.map(key => lines[key]).map(({ visibility, y0, y1 }) => ({ excluded: !visibility(), y0, y1 }))\r\n                );\r\n                lines[key].setYChartArea(min, max);\r\n                lines[key].setYMapArea(min, max);\r\n            });\r\n        };\r\n\r\n        const setUserViewport = (w, h) => {\r\n            chartViewportTransform.setAttribute('transform', `scale(${w} ${h})`);\r\n        };\r\n\r\n        const setXChartArea = (x0, x1) => {\r\n            chartAreaXTransform.setAttribute(\r\n                'transform',\r\n                `\r\n                    scale(${1 / (x1 - x0)} 1) \r\n                    translate(${-x0} 0)\r\n                `\r\n            );\r\n        };\r\n\r\n        const updateXBounds = (a, b) => {\r\n            x0 = a;\r\n            x1 = b;\r\n            setXChartArea(x0, x1);\r\n            setMapWindow(x0, x1);\r\n        };\r\n\r\n        const onResize = () => {\r\n            const { width: svgWidth, height: svgHeight } = chartSvg.getBoundingClientRect();\r\n            const { width: mapWidth, height: mapHeight } = mapNode.getBoundingClientRect();\r\n            setUserViewport(svgWidth, svgHeight);\r\n            setMapViewport(mapWidth, mapHeight);\r\n\r\n            setMapWindow(x0, x1);\r\n        };\r\n\r\n        const mount = () => {\r\n            wrapper.insertBefore(mapNode, controls);\r\n\r\n            keys.forEach(key => {\r\n                chartAreaXTransform.appendChild(lines[key].chartLineNode);\r\n                appendBeforeOverlay(lines[key].mapLineNode);\r\n                controls.appendChild(\r\n                    createCheckBox(colors[key], names[key], value => {\r\n                        lines[key].visibility(value);\r\n                        updateYChartArea();\r\n                    })\r\n                );\r\n            });\r\n        };\r\n\r\n        mount();\r\n        updateYChartArea();\r\n        onResize();\r\n        addListener(window, 'resize', onResize);\r\n\r\n        const getMapX = x => {\r\n            const rect = mapNode.getBoundingClientRect();\r\n            return (x - rect.left) / rect.width;\r\n        };\r\n\r\n        addDragAndDropListeners(mapWindow, coords => updateXBounds(getMapX(coords.x), getMapX(coords.x) + (x1 - x0)));\r\n        addDragAndDropListeners(windowLeftEdge, coords => updateXBounds(getMapX(coords.x + 10), x1));\r\n        addDragAndDropListeners(windowRightEdge, coords => updateXBounds(x0, getMapX(coords.x)));\r\n    };\r\n\r\n    return {\r\n        node: wrapper,\r\n        init\r\n    };\r\n};\r\n","import { createElement, createSvgElement } from '../../helpers/elements';\r\n\r\nexport default () => {\r\n    const mapSvg = createSvgElement('svg', {}, 'ctr_map-chart');\r\n    const map = createElement('ctr_map-container');\r\n    const mapViewportTransform = createSvgElement('g');\r\n\r\n    map.appendChild(mapSvg);\r\n    mapSvg.appendChild(mapViewportTransform);\r\n\r\n    const mapOverlayLeft = createSvgElement('rect', { x: 0, y: 0, width: 0, height: 1 }, 'crt_map-overlay');\r\n    const mapOverlayRight = createSvgElement('rect', { x: 1, y: 0, width: 0, height: 1 }, 'crt_map-overlay');\r\n    const mapWindow = createElement('crt_map-window', 'div');\r\n    const windowLeftEdge = createElement('crt_map-left-edge', 'div');\r\n    const windowRightEdge = createElement('crt_map-right-edge', 'div');\r\n\r\n    mapViewportTransform.append(mapOverlayLeft);\r\n    mapViewportTransform.append(mapOverlayRight);\r\n    map.append(mapWindow);\r\n    map.append(windowLeftEdge);\r\n    map.append(windowRightEdge);\r\n\r\n    const setMapViewport = (w, h) => {\r\n        mapViewportTransform.setAttribute('transform', `scale(${w} ${h})`);\r\n    };\r\n\r\n    const appendBeforeOverlay = node => {\r\n        mapViewportTransform.insertBefore(node, mapOverlayLeft);\r\n    };\r\n\r\n    const setMapWindow = (x0, x1) => {\r\n        mapOverlayLeft.setAttribute('width', x0);\r\n        mapOverlayRight.setAttribute('x', x1);\r\n        mapOverlayRight.setAttribute('width', 1 - x1);\r\n\r\n        const mapWidth = map.getBoundingClientRect().width;\r\n        mapWindow.style.left = `${x0 * mapWidth}px`;\r\n        mapWindow.style.width = `${(x1 - x0) * mapWidth}px`;\r\n        windowLeftEdge.style.left = `${x0 * mapWidth - 10}px`;\r\n        windowRightEdge.style.left = `${x1 * mapWidth}px`;\r\n    };\r\n\r\n    return {\r\n        mapNode: map,\r\n        appendBeforeOverlay,\r\n        setMapViewport,\r\n        setMapWindow,\r\n        windowLeftEdge,\r\n        windowRightEdge,\r\n        mapWindow\r\n    };\r\n};\r\n","export const minmax = arr => {\r\n    let min = null,\r\n        max = null;\r\n\r\n    arr.filter(arr => !arr.excluded).forEach(({ y0, y1 }) => {\r\n        min = Math.min(min || y0, y0);\r\n        max = Math.max(max || y1, y1);\r\n    });\r\n\r\n    return { min, max };\r\n};\r\n","import './switch-button.css';\r\nimport { addListener } from '../../helpers/event-listeners';\r\n\r\nconst nightLabel = 'Switch to Day Mode';\r\nconst dayLabel = 'Switch to Night Mode';\r\n\r\nexport default () => {\r\n    const btn = document.createElement('div');\r\n    btn.id = 'btn-switch';\r\n\r\n    let night = false;\r\n    btn.textContent = dayLabel;\r\n\r\n    const switchToNight = () => {\r\n        btn.textContent = nightLabel;\r\n        document.body.className = 'night';\r\n        night = true;\r\n    };\r\n\r\n    const switchToDay = () => {\r\n        btn.textContent = dayLabel;\r\n        document.body.className = '';\r\n        night = false;\r\n    };\r\n\r\n    addListener(btn, 'click', () => {\r\n        if (night) {\r\n            switchToDay();\r\n        } else {\r\n            switchToNight();\r\n        }\r\n    });\r\n\r\n    return btn;\r\n};\r\n","import './global.css';\r\nimport createChart from './components/chart/chart';\r\nimport createFooter from './components/footer/footer';\r\nimport data from './data';\r\nimport { createElement } from './helpers/elements';\r\n\r\nconst charts = createElement();\r\nconst root = document.getElementById('root');\r\nroot.appendChild(charts);\r\nroot.appendChild(createFooter());\r\n\r\ndata.forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #1');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n","import createSwitchButton from '../switch-button/switch-button';\r\nimport './footer.css';\r\n\r\nexport default () => {\r\n    const footer = document.createElement('div');\r\n    footer.id = 'footer';\r\n    footer.appendChild(createSwitchButton());\r\n    return footer;\r\n};\r\n"],"sourceRoot":""}