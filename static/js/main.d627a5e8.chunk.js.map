{"version":3,"sources":["components/icons/check-icon.svg","helpers/elements.js","helpers/event-listeners.js","components/check-box/check-box.js","components/icons/checkbox-icon.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","components/chart/get-lines.js","helpers/utils.js","components/switch-button/switch-button.js","index.js","components/footer/footer.js","components/chart/chart.js"],"names":["module","exports","__webpack_require__","p","createElement","className","tag","arguments","length","undefined","node","document","createSvgElement","attrs","createElementNS","baseVal","Object","keys","forEach","key","setAttribute","getSize","el","style","window","getComputedStyle","w","parseFloat","width","h","height","addListener","element","event","listener","addEventListener","check_box_check_box","color","text","onChange","checked","wrapper","mark","label","textContent","appendChild","img","icon","createCheckIcon","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","source","ownKeys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","get_lines","_ref","types","columns","colors","xKey","xColumn","column","yKeys","yColumns","reduce","yKey","_generatePathAndFindM","x","y","xMin","dx","y0","y1","d","Math","min","max","generatePathAndFindMinMaxY","stroke","visible","chartLine","stroke-linejoin","vector-effect","mapLine","mapAreaYTransformation","mapViewportTransformation","chartAreaXTransformation","chartAreaYTransformation","userViewportTransformation","setViewport","chartNode","setUserViewport","setXChartArea","x0","x1","setYChartArea","mapNode","setMapViewport","setYMapArea","visibility","flag","getLine","minmax","arr","excluded","switch_button_switch_button","btn","id","night","body","charts","root","getElementById","footer","createSwitchButton","createFooter","data","chartData","_createChart","title","chartSvg","mapSvg","names","controls","map","header","init","lines","getLines","updateYChartArea","_minmax","updateSvgBounds","_getSize","svgWidth","svgHeight","_getSize2","mapWidth","mapHeight","createCheckBox","_minmax2","createChart"],"mappings":"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","file":"static/js/main.d627a5e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check-icon.cc4bfc9f.svg\";","export const createElement = (className, tag = 'div') => {\r\n    const node = document.createElement(tag);\r\n    if (className) node.className = className;\r\n    return node;\r\n};\r\n\r\nexport const createSvgElement = (tag, attrs, className) => {\r\n    const node = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    if (className) {\r\n        node.className.baseVal = className;\r\n    }\r\n    if (attrs) {\r\n        Object.keys(attrs).forEach(key => {\r\n            node.setAttribute(key, attrs[key]);\r\n        });\r\n    }\r\n    return node;\r\n};\r\n\r\nexport const getSize = el => {\r\n    const style = window.getComputedStyle(el);\r\n    const w = parseFloat(style.width);\r\n    const h = parseFloat(style.height);\r\n    return { w, h };\r\n};\r\n","export const addListener = (element, event, listener) => {\r\n    element.addEventListener(event, listener, false);\r\n};\r\n\r\nexport const removeListener = (element, event, listener) => {\r\n    element.removeEventListener(event, listener);\r\n};\r\n","import './check-box.css';\r\nimport { createElement } from '../../helpers/elements';\r\nimport { addListener } from '../../helpers/event-listeners';\r\nimport createCheckIcon from '../icons/checkbox-icon';\r\n\r\nconst uncheckedMark = 'cb_unchecked-mark';\r\nconst checkedMark = 'cb_checked-mark';\r\n\r\nexport default (color, text, onChange) => {\r\n    let checked = true;\r\n\r\n    const wrapper = createElement('cb_wrapper');\r\n\r\n    const mark = createElement(checkedMark);\r\n    mark.style.color = color;\r\n\r\n    const label = createElement('cb_label');\r\n    label.textContent = text;\r\n\r\n    wrapper.appendChild(mark);\r\n    wrapper.appendChild(label);\r\n\r\n    mark.appendChild(createCheckIcon());\r\n\r\n    addListener(wrapper, 'click', () => {\r\n        checked = !checked;\r\n        onChange && onChange(checked);\r\n        mark.className = checked ? checkedMark : uncheckedMark;\r\n    });\r\n\r\n    return wrapper;\r\n};\r\n","import icon from './check-icon.svg';\r\nimport { createElement } from '../../helpers/elements';\r\n\r\nexport default () => {\r\n    const img = createElement('icon', 'img');\r\n    img.setAttribute('src', icon);\r\n    return img;\r\n};\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import { createSvgElement } from '../../helpers/elements';\r\n\r\nconst generatePathAndFindMinMaxY = (x, y) => {\r\n    const length = x.length;\r\n\r\n    let xMin = x[1],\r\n        dx = x[length - 1] - xMin,\r\n        y0 = y[1],\r\n        y1 = y[1];\r\n    let d = 'M ' + (x[1] - xMin) / dx + ' ' + y[1] + ' ';\r\n\r\n    for (let i = 2; i < length; i++) {\r\n        d += 'L ' + (x[i] - xMin) / dx + ' ' + y[i] + ' ';\r\n        y0 = Math.min(y[i], y0);\r\n        y1 = Math.max(y[i], y1);\r\n    }\r\n\r\n    return { d, y0, y1 };\r\n};\r\n\r\nconst getLine = (d, stroke) => {\r\n    let visible = true;\r\n\r\n    const chartLine = createSvgElement(\r\n        'path',\r\n        { 'stroke-linejoin': 'round', 'vector-effect': 'non-scaling-stroke', d, stroke },\r\n        'line'\r\n    );\r\n\r\n    const mapLine = createSvgElement('path', { 'vector-effect': 'non-scaling-stroke', d, stroke }, 'line');\r\n\r\n    const mapAreaYTransformation = createSvgElement('g');\r\n    const mapViewportTransformation = createSvgElement('g');\r\n\r\n    mapAreaYTransformation.appendChild(mapLine);\r\n    mapViewportTransformation.appendChild(mapAreaYTransformation);\r\n\r\n    const chartAreaXTransformation = createSvgElement('g');\r\n    const chartAreaYTransformation = createSvgElement('g', {}, 'animated');\r\n    const userViewportTransformation = createSvgElement('g');\r\n\r\n    chartAreaXTransformation.appendChild(chartLine);\r\n    chartAreaYTransformation.appendChild(chartAreaXTransformation);\r\n    userViewportTransformation.appendChild(chartAreaYTransformation);\r\n\r\n    const setUserViewport = (w, h) => {\r\n        setViewport(userViewportTransformation, w, h);\r\n    };\r\n\r\n    const setMapViewport = (w, h) => {\r\n        setViewport(mapViewportTransformation, w, h);\r\n    };\r\n\r\n    const setViewport = (element, w, h) => {\r\n        element.setAttribute(\r\n            'transform',\r\n            `  \r\n            scale(${w} ${h})\r\n        `\r\n        );\r\n    };\r\n\r\n    const setXChartArea = (x0, x1) => {\r\n        chartAreaXTransformation.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(${1 / (x1 - x0)} 1) \r\n            translate(${-x0} 0)\r\n        `\r\n        );\r\n    };\r\n\r\n    const setYChartArea = (y0, y1) => {\r\n        chartAreaYTransformation.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(1 ${1 / (y1 - y0)}) \r\n            translate(0 ${-y0})\r\n        `\r\n        );\r\n    };\r\n\r\n    const setYMapArea = (y0, y1) => {\r\n        mapAreaYTransformation.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(1 ${1 / (y1 - y0)}) \r\n            translate(0 ${-y0})\r\n        `\r\n        );\r\n    };\r\n\r\n    const visibility = flag => {\r\n        if (flag === undefined) {\r\n            /* reading */\r\n            return visible;\r\n        } else {\r\n            /* writing */\r\n            visible = flag;\r\n            chartLine.setAttribute('stroke', flag ? stroke : 'transparent');\r\n        }\r\n    };\r\n\r\n    return {\r\n        chartNode: userViewportTransformation,\r\n        setUserViewport,\r\n        setXChartArea,\r\n        setYChartArea,\r\n        mapNode: mapViewportTransformation,\r\n        setMapViewport,\r\n        setYMapArea,\r\n        visibility\r\n    };\r\n};\r\n\r\nexport default ({ types, columns, colors }) => {\r\n    const xKey = Object.keys(types).filter(key => types[key] === 'x')[0];\r\n    const xColumn = columns.filter(column => column[0] === xKey)[0];\r\n\r\n    const yKeys = Object.keys(types).filter(key => types[key] !== 'x');\r\n    const yColumns = yKeys.reduce(\r\n        (obj, key) => ({ ...obj, [key]: columns.filter(column => column[0] === key)[0] }),\r\n        {}\r\n    );\r\n\r\n    const yKeysToLines = yKeys.reduce((obj, yKey) => {\r\n        const { d, y0, y1 } = generatePathAndFindMinMaxY(xColumn, yColumns[yKey]);\r\n        const line = getLine(d, colors[yKey]);\r\n        return {\r\n            ...obj,\r\n            [yKey]: {\r\n                y0,\r\n                y1,\r\n                ...line\r\n            }\r\n        };\r\n    }, {});\r\n\r\n    return yKeysToLines;\r\n};\r\n","export const minmax = arr => {\r\n    let min = null,\r\n        max = null;\r\n\r\n    arr.filter(arr => !arr.excluded).forEach(({ y0, y1 }) => {\r\n        min = Math.min(min || y0, y0);\r\n        max = Math.max(max || y1, y1);\r\n    });\r\n\r\n    return { min, max };\r\n};\r\n","import './switch-button.css';\r\nimport { addListener } from '../../helpers/event-listeners';\r\n\r\nconst nightLabel = 'Switch to Day Mode';\r\nconst dayLabel = 'Switch to Night Mode';\r\n\r\nexport default () => {\r\n    const btn = document.createElement('div');\r\n    btn.id = 'btn-switch';\r\n\r\n    let night = false;\r\n    btn.textContent = dayLabel;\r\n\r\n    const switchToNight = () => {\r\n        btn.textContent = nightLabel;\r\n        document.body.className = 'night';\r\n        night = true;\r\n    };\r\n\r\n    const switchToDay = () => {\r\n        btn.textContent = dayLabel;\r\n        document.body.className = '';\r\n        night = false;\r\n    };\r\n\r\n    addListener(btn, 'click', () => {\r\n        if (night) {\r\n            switchToDay();\r\n        } else {\r\n            switchToNight();\r\n        }\r\n    });\r\n\r\n    return btn;\r\n};\r\n","import './global.css';\r\nimport createChart from './components/chart/chart';\r\nimport createFooter from './components/footer/footer';\r\nimport data from './data';\r\nimport { createElement } from './helpers/elements';\r\n\r\nconst charts = createElement();\r\nconst root = document.getElementById('root');\r\nroot.appendChild(charts);\r\nroot.appendChild(createFooter());\r\n\r\ndata.forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #1');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n","import createSwitchButton from '../switch-button/switch-button';\r\nimport './footer.css';\r\n\r\nexport default () => {\r\n    const footer = document.createElement('div');\r\n    footer.id = 'footer';\r\n    footer.appendChild(createSwitchButton());\r\n    return footer;\r\n};\r\n","import createCheckBox from '../check-box/check-box';\r\nimport getLines from './get-lines';\r\nimport { createElement, createSvgElement, getSize } from '../../helpers/elements';\r\nimport './chart.css';\r\nimport { minmax } from '../../helpers/utils';\r\nimport { addListener } from '../../helpers/event-listeners';\r\n\r\nexport default (data, title) => {\r\n    const chartSvg = createSvgElement('svg', {}, 'ctr_chart');\r\n    const mapSvg = createSvgElement('svg', {}, 'ctr_map-chart');\r\n\r\n    const { colors, names } = data;\r\n\r\n    const wrapper = createElement('crt_wrapper');\r\n    const controls = createElement('crt_controls');\r\n    const map = createElement('ctr_map-container');\r\n    const header = createElement();\r\n    header.textContent = title;\r\n\r\n    wrapper.appendChild(header);\r\n    wrapper.appendChild(chartSvg);\r\n    wrapper.appendChild(map);\r\n    wrapper.appendChild(controls);\r\n    map.appendChild(mapSvg);\r\n\r\n    const init = () => {\r\n        const lines = getLines(data);\r\n        const keys = Object.keys(colors);\r\n\r\n        const updateYChartArea = () => {\r\n            keys.forEach(key => {\r\n                const { min, max } = minmax(\r\n                    keys.map(key => lines[key]).map(({ visibility, y0, y1 }) => ({ excluded: !visibility(), y0, y1 }))\r\n                );\r\n                lines[key].setYChartArea(min, max);\r\n            });\r\n        };\r\n\r\n        const updateYMapArea = () => {\r\n            keys.forEach(key => {\r\n                const { min, max } = minmax(keys.map(key => lines[key]));\r\n                lines[key].setYMapArea(min, max);\r\n            });\r\n        };\r\n\r\n        const updateSvgBounds = () => {\r\n            const { w: svgWidth, h: svgHeight } = getSize(chartSvg);\r\n            const { w: mapWidth, h: mapHeight } = getSize(map);\r\n            keys.forEach(key => {\r\n                lines[key].setUserViewport(svgWidth, svgHeight);\r\n                lines[key].setMapViewport(mapWidth, mapHeight);\r\n            });\r\n        };\r\n\r\n        keys.forEach(key => {\r\n            chartSvg.appendChild(lines[key].chartNode);\r\n            mapSvg.appendChild(lines[key].mapNode);\r\n            controls.appendChild(\r\n                createCheckBox(colors[key], names[key], value => {\r\n                    lines[key].visibility(value);\r\n                    updateYChartArea();\r\n                })\r\n            );\r\n        });\r\n\r\n        updateYChartArea();\r\n        updateYMapArea();\r\n        updateSvgBounds();\r\n\r\n        addListener(window, 'resize', updateSvgBounds);\r\n    };\r\n\r\n    return {\r\n        node: wrapper,\r\n        init\r\n    };\r\n};\r\n"],"sourceRoot":""}