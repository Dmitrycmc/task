{"version":3,"sources":["components/icons/check-icon.svg","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread.js","helpers/elements.js","helpers/event-listeners.js","components/check-box/check-box.js","components/icons/checkbox-icon.js","components/chart/get-lines.js","helpers/utils.js","components/chart/chart.js","components/chart/map.js","components/switch-button/switch-button.js","index.js","components/footer/footer.js"],"names":["module","exports","__webpack_require__","p","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","createElement","className","tag","undefined","node","document","createSvgElement","attrs","createElementNS","baseVal","setAttribute","addListener","element","event","listener","addEventListener","removeListener","removeEventListener","addDragAndDropListeners","getTouchCoords","e","x","touches","clientX","y","clientY","offset","offsetX","offsetY","getMouseOffset","onMouseMove","buttons","body","onMouseUp","mouseCoords","getMouseCoords","cornerCoords","box","getBoundingClientRect","touchCoords","left","top","getTouchOffset","onTouchMove","onTouchEnd","check_box_check_box","color","text","onChange","checked","wrapper","mark","style","label","textContent","appendChild","img","icon","createCheckIcon","get_lines","xColumn","yColumns","colors","reduce","points","stroke","visible","chartLine","stroke-linejoin","vector-effect","mapLine","mapAreaYTransform","chartAreaYTransform","chartLineNode","setYChartArea","y0","y1","mapLineNode","setYMapArea","visibility","flag","getLine","xMin","dx","generatePoints","boundBy","right","Math","max","min","chart_chart","data","title","chartSvg","names","types","columns","xKey","column","x0","x1","keyToYBound","getYBounds","xData","yData","j","k","el","calcYBounds","chartViewportTransform","chartAreaXTransform","controls","header","init","lines","getLines","_createMap","mapSvg","map","svgWrapper","mapViewportTransform","mapOverlayLeft","width","height","mapOverlayRight","mapWindow","windowLeftEdge","windowRightEdge","append","mapNode","appendBeforeOverlay","insertBefore","setMapViewport","w","h","setMapWindow","mapWidth","createMap","updateYArea","_minmax","arr","_ref","minmax","a","deepUpdateYArea","updateXBounds","b","setXChartArea","onResize","_chartSvg$getBounding","svgWidth","svgHeight","_mapNode$getBoundingC","mapHeight","createCheckBox","window","getMapX","rect","coords","switch_button_switch_button","btn","id","night","charts","root","getElementById","footer","createSwitchButton","createFooter","chartData","_createChart","createChart"],"mappings":"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","file":"static/js/main.6261a261.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check-icon.cc4bfc9f.svg\";","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","export const createElement = (className, tag = 'div') => {\r\n    const node = document.createElement(tag);\r\n    if (className) node.className = className;\r\n    return node;\r\n};\r\n\r\nexport const createSvgElement = (tag, attrs, className) => {\r\n    const node = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    if (className) {\r\n        node.className.baseVal = className;\r\n    }\r\n    if (attrs) {\r\n        Object.keys(attrs).forEach(key => {\r\n            node.setAttribute(key, attrs[key]);\r\n        });\r\n    }\r\n    return node;\r\n};\r\n","export const addListener = (element, event, listener) => {\r\n    element.addEventListener(event, listener, false);\r\n};\r\n\r\nexport const removeListener = (element, event, listener) => {\r\n    element.removeEventListener(event, listener);\r\n};\r\n\r\nexport const addDragAndDropListeners = (element, listener) => {\r\n    const getMouseCoords = e => ({ x: e.clientX, y: e.clientY });\r\n    const getTouchCoords = e => ({ x: e.touches[0].clientX, y: e.touches[0].clientY });\r\n    const getMouseOffset = e => ({ x: e.offsetX, y: e.offsetY });\r\n    const getTouchOffset = e => {\r\n        const box = element.getBoundingClientRect();\r\n        const touchCoords = getTouchCoords(e);\r\n        return {\r\n            x: touchCoords.x - box.left,\r\n            y: touchCoords.y - box.top\r\n        };\r\n    };\r\n\r\n    addListener(element, 'mousedown', e => {\r\n        const offset = getMouseOffset(e);\r\n\r\n        const onMouseMove = e => {\r\n            if (e.buttons !== 1) {\r\n                removeListener(document.body, 'mousemove', onMouseMove);\r\n                removeListener(document.body, 'mouseup', onMouseUp);\r\n            }\r\n            const mouseCoords = getMouseCoords(e);\r\n            const cornerCoords = { x: mouseCoords.x - offset.x, y: mouseCoords.y + offset.y };\r\n            listener(cornerCoords);\r\n        };\r\n\r\n        function onMouseUp() {\r\n            removeListener(document.body, 'mousemove', onMouseMove);\r\n            removeListener(document.body, 'mouseup', onMouseUp);\r\n        }\r\n\r\n        addListener(document.body, 'mousemove', onMouseMove);\r\n        addListener(document.body, 'mouseup', onMouseUp);\r\n    });\r\n\r\n    addListener(element, 'touchstart', e => {\r\n        const offset = getTouchOffset(e);\r\n\r\n        const onTouchMove = e => {\r\n            const touchCoords = getTouchCoords(e);\r\n            const cornerCoords = { x: touchCoords.x - offset.x, y: touchCoords.y + offset.y };\r\n            listener(cornerCoords);\r\n        };\r\n\r\n        function onTouchEnd() {\r\n            removeListener(document.body, 'touchmove', onTouchMove);\r\n            removeListener(document.body, 'touchend', onTouchEnd);\r\n            removeListener(document.body, 'touchcancel', onTouchEnd);\r\n        }\r\n\r\n        addListener(document.body, 'touchmove', onTouchMove);\r\n        addListener(document.body, 'touchend', onTouchEnd);\r\n        addListener(document.body, 'touchcancel', onTouchEnd);\r\n    });\r\n};\r\n","import './check-box.css';\r\nimport { createElement } from '../../helpers/elements';\r\nimport { addListener } from '../../helpers/event-listeners';\r\nimport createCheckIcon from '../icons/checkbox-icon';\r\n\r\nconst uncheckedMark = 'cb_unchecked-mark';\r\nconst checkedMark = 'cb_checked-mark';\r\n\r\nexport default (color, text, onChange) => {\r\n    let checked = true;\r\n\r\n    const wrapper = createElement('cb_wrapper');\r\n\r\n    const mark = createElement(checkedMark);\r\n    mark.style.color = color;\r\n\r\n    const label = createElement('cb_label');\r\n    label.textContent = text;\r\n\r\n    wrapper.appendChild(mark);\r\n    wrapper.appendChild(label);\r\n\r\n    mark.appendChild(createCheckIcon());\r\n\r\n    addListener(wrapper, 'click', () => {\r\n        checked = !checked;\r\n        onChange && onChange(checked);\r\n        mark.className = checked ? checkedMark : uncheckedMark;\r\n    });\r\n\r\n    return wrapper;\r\n};\r\n","import icon from './check-icon.svg';\r\nimport { createElement } from '../../helpers/elements';\r\n\r\nexport default () => {\r\n    const img = createElement('icon', 'img');\r\n    img.setAttribute('src', icon);\r\n    return img;\r\n};\r\n","import { createSvgElement } from '../../helpers/elements';\r\n\r\nconst generatePoints = (x, y) => {\r\n    const length = x.length;\r\n\r\n    let xMin = x[1],\r\n        dx = x[length - 1] - xMin;\r\n    let points = '' + 0 + ',' + y[1] + ' ';\r\n\r\n    for (let i = 2; i < length; i++) {\r\n        points += '' + (x[i] - xMin) / dx + ',' + y[i] + ' ';\r\n    }\r\n\r\n    return points;\r\n};\r\n\r\nconst getLine = (points, stroke) => {\r\n    let visible = true;\r\n\r\n    const chartLine = createSvgElement(\r\n        'polyline',\r\n        { 'stroke-linejoin': 'round', 'vector-effect': 'non-scaling-stroke', points, stroke },\r\n        'chart-line'\r\n    );\r\n\r\n    const mapLine = createSvgElement(\r\n        'polyline',\r\n        { 'stroke-linejoin': 'round', 'vector-effect': 'non-scaling-stroke', points, stroke },\r\n        'map-line'\r\n    );\r\n\r\n    const mapAreaYTransform = createSvgElement('g', {}, 'animated');\r\n\r\n    mapAreaYTransform.appendChild(mapLine);\r\n\r\n    const chartAreaYTransform = createSvgElement('g', {}, 'animated');\r\n\r\n    chartAreaYTransform.appendChild(chartLine);\r\n\r\n    const setYChartArea = (y0, y1) => {\r\n        chartAreaYTransform.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(1 ${1 / (y1 - y0)}) \r\n            translate(0 ${-y0})\r\n        `\r\n        );\r\n    };\r\n\r\n    const setYMapArea = (y0, y1) => {\r\n        mapAreaYTransform.setAttribute(\r\n            'transform',\r\n            `\r\n            scale(1 ${1 / (y1 - y0)}) \r\n            translate(0 ${-y0})\r\n        `\r\n        );\r\n    };\r\n\r\n    const visibility = flag => {\r\n        if (flag === undefined) {\r\n            /* reading */\r\n            return visible;\r\n        } else {\r\n            /* writing */\r\n            visible = flag;\r\n            chartLine.setAttribute('stroke', flag ? stroke : 'transparent');\r\n            mapLine.setAttribute('stroke', flag ? stroke : 'transparent');\r\n        }\r\n    };\r\n\r\n    return {\r\n        chartLineNode: chartAreaYTransform,\r\n        setYChartArea,\r\n        mapLineNode: mapAreaYTransform,\r\n        setYMapArea,\r\n        visibility\r\n    };\r\n};\r\n\r\nexport default (keys, xColumn, yColumns, colors) => {\r\n    const keysToLines = keys.reduce((obj, key) => {\r\n        const points = generatePoints(xColumn, yColumns[key]);\r\n        const line = getLine(points, colors[key]);\r\n        return {\r\n            ...obj,\r\n            [key]: line\r\n        };\r\n    }, {});\r\n\r\n    return keysToLines;\r\n};\r\n","export const minmax = arr => {\r\n    let min = null,\r\n        max = null;\r\n\r\n    arr.forEach(({ y0, y1 }) => {\r\n        min = min === null ? y0 : Math.min(min, y0);\r\n        max = max === null ? y1 : Math.max(max, y1);\r\n    });\r\n\r\n    return { min, max };\r\n};\r\n\r\nexport const boundBy = (x, left, right) => {\r\n    x = left === undefined ? x : Math.max(left, x);\r\n    x = right === undefined ? x : Math.min(right, x);\r\n    return x;\r\n};\r\n\r\nexport const calcYBounds = (xData, yData, x0, x1) => {\r\n    let i = 1;\r\n    let j = xData.length - 1;\r\n\r\n    const xMin = xData[i];\r\n    const dx = xData[j] - xMin;\r\n    x0 = x0 * dx + xMin;\r\n    x1 = x1 * dx + xMin;\r\n\r\n    while (xData[i] < x0) i++;\r\n    while (xData[j] > x1) j--;\r\n\r\n    let min = yData[i],\r\n        max = yData[i];\r\n\r\n    for (let k = i + 1; k <= j; k++) {\r\n        const el = yData[k];\r\n        min = Math.min(min, el);\r\n        max = Math.max(max, el);\r\n    }\r\n\r\n    return { y0: min, y1: max };\r\n};\r\n","import createCheckBox from '../check-box/check-box';\r\nimport getLines from './get-lines';\r\nimport { createElement, createSvgElement } from '../../helpers/elements';\r\nimport './chart.css';\r\nimport { boundBy, calcYBounds, minmax } from '../../helpers/utils';\r\nimport { addDragAndDropListeners, addListener } from '../../helpers/event-listeners';\r\nimport createMap from './map';\r\n\r\nconst MIN_WIN_WIDTH = 0.1;\r\n\r\nexport default (data, title) => {\r\n    const chartSvg = createSvgElement('svg', {}, 'ctr_chart');\r\n\r\n    const { colors, names, types, columns } = data;\r\n\r\n    const xKey = Object.keys(types).filter(key => types[key] === 'x')[0];\r\n    const xColumn = columns.filter(column => column[0] === xKey)[0];\r\n\r\n    const keys = Object.keys(types).filter(key => types[key] !== 'x');\r\n    const yColumns = keys.reduce((obj, key) => ({ ...obj, [key]: columns.filter(column => column[0] === key)[0] }), {});\r\n\r\n    let x0 = 0.1;\r\n    let x1 = 0.8;\r\n\r\n    let keyToYBound = {};\r\n    const getYBounds = key => keyToYBound[key] || (keyToYBound[key] = calcYBounds(xColumn, yColumns[key], x0, x1));\r\n    const resetYBoundsCash = () => (keyToYBound = {});\r\n\r\n    const chartViewportTransform = createSvgElement('g');\r\n    const chartAreaXTransform = createSvgElement('g');\r\n\r\n    const wrapper = createElement('crt_wrapper');\r\n    const controls = createElement('crt_controls');\r\n    const header = createElement();\r\n    header.textContent = title;\r\n\r\n    wrapper.appendChild(header);\r\n    wrapper.appendChild(chartSvg);\r\n    chartSvg.appendChild(chartViewportTransform);\r\n    chartViewportTransform.appendChild(chartAreaXTransform);\r\n    wrapper.appendChild(controls);\r\n\r\n    const init = () => {\r\n        const lines = getLines(keys, xColumn, yColumns, colors);\r\n        const {\r\n            mapNode,\r\n            setMapViewport,\r\n            appendBeforeOverlay,\r\n            setMapWindow,\r\n            windowLeftEdge,\r\n            windowRightEdge,\r\n            mapWindow\r\n        } = createMap();\r\n\r\n        const updateYArea = () => {\r\n            const { min, max } = minmax(\r\n                keys.map(key => (lines[key].visibility() ? getYBounds(key) : null)).filter(a => !!a)\r\n            );\r\n\r\n            keys.forEach(key => {\r\n                lines[key].setYChartArea(min, max);\r\n                lines[key].setYMapArea(min, max);\r\n            });\r\n        };\r\n\r\n        const deepUpdateYArea = () => {\r\n            resetYBoundsCash();\r\n            updateYArea();\r\n        };\r\n\r\n        const setUserViewport = (w, h) => {\r\n            chartViewportTransform.setAttribute('transform', `scale(${w} ${h})`);\r\n        };\r\n\r\n        const setXChartArea = (x0, x1) => {\r\n            chartAreaXTransform.setAttribute(\r\n                'transform',\r\n                `\r\n                    scale(${1 / (x1 - x0)} 1) \r\n                    translate(${-x0} 0)\r\n                `\r\n            );\r\n            deepUpdateYArea();\r\n        };\r\n\r\n        const updateXBounds = (a, b) => {\r\n            x0 = a;\r\n            x1 = b;\r\n            setXChartArea(x0, x1);\r\n            setMapWindow(x0, x1);\r\n        };\r\n\r\n        const onResize = () => {\r\n            const { width: svgWidth, height: svgHeight } = chartSvg.getBoundingClientRect();\r\n            const { width: mapWidth, height: mapHeight } = mapNode.getBoundingClientRect();\r\n            setUserViewport(svgWidth, svgHeight);\r\n            setMapViewport(mapWidth, mapHeight);\r\n\r\n            setMapWindow(x0, x1);\r\n        };\r\n\r\n        const mount = () => {\r\n            wrapper.insertBefore(mapNode, controls);\r\n\r\n            keys.forEach(key => {\r\n                chartAreaXTransform.appendChild(lines[key].chartLineNode);\r\n                appendBeforeOverlay(lines[key].mapLineNode);\r\n                controls.appendChild(\r\n                    createCheckBox(colors[key], names[key], value => {\r\n                        lines[key].visibility(value);\r\n                        updateYArea();\r\n                    })\r\n                );\r\n            });\r\n        };\r\n\r\n        mount();\r\n        deepUpdateYArea();\r\n        onResize();\r\n        addListener(window, 'resize', onResize);\r\n\r\n        const getMapX = x => {\r\n            const rect = mapNode.getBoundingClientRect();\r\n            return (x - rect.left) / rect.width;\r\n        };\r\n\r\n        addDragAndDropListeners(mapWindow, coords => {\r\n            const width = x1 - x0;\r\n            const left = getMapX(coords.x);\r\n            const right = left + width;\r\n            updateXBounds(boundBy(left, 0, 1 - width), boundBy(right, width, 1));\r\n        });\r\n        addDragAndDropListeners(windowLeftEdge, coords => {\r\n            const left = getMapX(coords.x + 10);\r\n            updateXBounds(boundBy(left, 0, x1 - MIN_WIN_WIDTH), x1);\r\n        });\r\n        addDragAndDropListeners(windowRightEdge, coords => {\r\n            const right = getMapX(coords.x);\r\n            updateXBounds(x0, boundBy(right, x0 + MIN_WIN_WIDTH, 1));\r\n        });\r\n    };\r\n\r\n    return {\r\n        node: wrapper,\r\n        init\r\n    };\r\n};\r\n","import { createElement, createSvgElement } from '../../helpers/elements';\r\n\r\nexport default () => {\r\n    const mapSvg = createSvgElement('svg', {}, 'ctr_map-chart');\r\n    const map = createElement('ctr_map-container');\r\n    const svgWrapper = createElement('ctr_map-svg-wrapper');\r\n    const mapViewportTransform = createSvgElement('g');\r\n\r\n    svgWrapper.appendChild(mapSvg);\r\n    map.appendChild(svgWrapper);\r\n    mapSvg.appendChild(mapViewportTransform);\r\n\r\n    const mapOverlayLeft = createSvgElement('rect', { x: 0, y: 0, width: 0, height: 1 }, 'crt_map-overlay');\r\n    const mapOverlayRight = createSvgElement('rect', { x: 1, y: 0, width: 0, height: 1 }, 'crt_map-overlay');\r\n    const mapWindow = createElement('crt_map-window', 'div');\r\n    const windowLeftEdge = createElement('crt_map-left-edge', 'div');\r\n    const windowRightEdge = createElement('crt_map-right-edge', 'div');\r\n\r\n    mapViewportTransform.append(mapOverlayLeft);\r\n    mapViewportTransform.append(mapOverlayRight);\r\n    map.append(mapWindow);\r\n    map.append(windowLeftEdge);\r\n    map.append(windowRightEdge);\r\n\r\n    const setMapViewport = (w, h) => {\r\n        mapViewportTransform.setAttribute('transform', `scale(${w} ${h})`);\r\n    };\r\n\r\n    const appendBeforeOverlay = node => {\r\n        mapViewportTransform.insertBefore(node, mapOverlayLeft);\r\n    };\r\n\r\n    const setMapWindow = (x0, x1) => {\r\n        mapOverlayLeft.setAttribute('width', x0);\r\n        mapOverlayRight.setAttribute('x', x1);\r\n        mapOverlayRight.setAttribute('width', 1 - x1);\r\n\r\n        const mapWidth = map.getBoundingClientRect().width;\r\n        mapWindow.style.left = `${x0 * mapWidth}px`;\r\n        mapWindow.style.width = `${(x1 - x0) * mapWidth}px`;\r\n        windowLeftEdge.style.left = `${x0 * mapWidth - 10}px`;\r\n        windowRightEdge.style.left = `${x1 * mapWidth - 1}px`;\r\n    };\r\n\r\n    return {\r\n        mapNode: map,\r\n        appendBeforeOverlay,\r\n        setMapViewport,\r\n        setMapWindow,\r\n        windowLeftEdge,\r\n        windowRightEdge,\r\n        mapWindow\r\n    };\r\n};\r\n","import './switch-button.css';\r\nimport { addListener } from '../../helpers/event-listeners';\r\n\r\nconst nightLabel = 'Switch to Day Mode';\r\nconst dayLabel = 'Switch to Night Mode';\r\n\r\nexport default () => {\r\n    const btn = document.createElement('div');\r\n    btn.id = 'btn-switch';\r\n\r\n    let night = false;\r\n    btn.textContent = dayLabel;\r\n\r\n    const switchToNight = () => {\r\n        btn.textContent = nightLabel;\r\n        document.body.className = 'night';\r\n        night = true;\r\n    };\r\n\r\n    const switchToDay = () => {\r\n        btn.textContent = dayLabel;\r\n        document.body.className = '';\r\n        night = false;\r\n    };\r\n\r\n    addListener(btn, 'click', () => {\r\n        if (night) {\r\n            switchToDay();\r\n        } else {\r\n            switchToNight();\r\n        }\r\n    });\r\n\r\n    return btn;\r\n};\r\n","import './global.css';\r\nimport createChart from './components/chart/chart';\r\nimport createFooter from './components/footer/footer';\r\nimport data from './data';\r\nimport { createElement } from './helpers/elements';\r\n\r\nconst charts = createElement();\r\nconst root = document.getElementById('root');\r\nroot.appendChild(charts);\r\nroot.appendChild(createFooter());\r\n\r\ndata.forEach(chartData => {\r\n    const { node, init } = createChart(chartData, 'Chart #1');\r\n    charts.appendChild(node);\r\n    init();\r\n});\r\n","import createSwitchButton from '../switch-button/switch-button';\r\nimport './footer.css';\r\n\r\nexport default () => {\r\n    const footer = document.createElement('div');\r\n    footer.id = 'footer';\r\n    footer.appendChild(createSwitchButton());\r\n    return footer;\r\n};\r\n"],"sourceRoot":""}